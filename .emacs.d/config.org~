** Setup package repositories

#+begin_src emacs-lisp
(require 'package)
(add-to-list 'package-archives '("gnu"   . "https://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(package-initialize)
#+end_src

** Setup use-package
#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))
(eval-and-compile
  (setq use-package-always-ensure t
        use-package-expand-minimally t))
#+end_src

** Identifiers
#+begin_src emacs-lisp
(setq user-full-name "John Brittain"
      user-mail-address "jsb1982@gmail.com")
#+end_src

** Garbage collection
#+begin_src emacs-lisp
(setq gc-cons-threshold 50000000)
(setq large-file-warning-threshold 100000000)
#+end_src

** Prefer UTF-8 coding
#+begin_src emacs-lisp
(prefer-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
#+end_src

** User interface
#+begin_src emacs-lisp
;(menu-bar-mode -1)
;(toggle-scroll-bar -1)
;(tool-bar-mode -1)
(blink-cursor-mode -1)
;(scroll-bar-mode -1)
(global-hl-line-mode +1)
(line-number-mode +1)
(global-display-line-numbers-mode 1)
(column-number-mode t)
(size-indication-mode t)
#+end_src

** Startup screen
#+begin_src emacs-lisp
(setq inhibit-startup-screen t)
#+end_src

** IDO ("Interactively DO things")
#+begin_src emacs-lisp
(setq ido-enable-flex-matching t)
(setq ido-everywhere t)
(ido-mode 1)
#+end_src

** Apropos (regexp matching and autocompletion)
#+begin_src emacs-lisp
(setq apropos-sort-by-scores t) ; Relevance sorting (apropos)
;(windmove-default-keybindings) ; S-<up/down/left/right> to navigate windows
#+end_src

** Language server protocols
#+begin_src emacs-lisp
(use-package lsp-mode :commands lsp :ensure t)
(use-package lsp-ui :commands lsp-ui-mode :ensure t)
#+end_src

** C/C++ language server (ccls)
#+begin_src emacs-lisp
;(use-package ccls
;  :ensure t
;  :config
;  (setq ccls-executable "ccls")
;  (setq lsp-prefer-flymake nil)
;  (setq-default flycheck-disabled-checkers '(c/c++-clang c/c++-cppcheck c/c++-gcc))
;  :hook ((c-mode c++-mode objc-mode) .
;         (lambda () (require 'ccls) (lsp))))
#+end_src

** Doom theme
#+begin_src emacs-lisp
  (use-package doom-themes
    :ensure t
    :config
    (load-theme 'doom-one t)
    (doom-themes-visual-bell-config)
  )
#+end_src

** Mode line theme
#+begin_src emacs-lisp
(use-package smart-mode-line-powerline-theme
  :ensure t)
#+end_src

** Smart mode line
#+begin_src emacs-lisp
;(use-package smart-mode-line
;  :ensure t
;  :config
;  (setq sml/theme 'powerline)
;  (add-hook 'after-init-hook 'sml/setup))
#+end_src

** Company (autocomplete)
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 3)
  )

  (with-eval-after-load 'company
    (define-key company-active-map (kbd "M-n") nil)
    (define-key company-active-map (kbd "M-p") nil)
    (define-key company-active-map (kbd "C-n") #'company-select-next)
    (define-key company-active-map (kbd "C-p") #'company-select-previous)
    )

  (use-package company-irony
    :ensure t
    :config
    (require 'company)
    (add-to-list 'company-backends 'company-irony)
    )

  (with-eval-after-load 'company
    (add-hook 'c++-mode-hook 'company-mode)
    (add-hook 'c-mode-hook 'company-mode)
  )
#+end_src

** Irony
#+begin_src emacs-lisp
  (use-package irony
    :ensure t
    :config
    (add-hook 'c++-mode-hook 'irony-mode)
    (add-hook 'c-mode-hook 'irony-mode)
    (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  )
#+end_src

** Flycheck
#+begin_src emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))

  ;(with-eval-after-load 'flycheck
  ;  (add-hook 'flycheck-mode-hook #'flycheck-inline-mode))

  (setq flycheck-inline-display-function
      (lambda (msg pos err)
        (let* ((ov (quick-peek-overlay-ensure-at pos))
               (contents (quick-peek-overlay-contents ov)))
          (setf (quick-peek-overlay-contents ov)
                (concat contents (when contents "\n") msg))
          (quick-peek-update ov)))
      flycheck-inline-clear-function #'quick-peek-hide)
#+end_src

** Transpose frame

Allows frames to be transposed (horizontal split converted to vertical splits and vice versa) by calling "M-x transpose-frame"

#+begin_src emacs-lisp
  (use-package transpose-frame
    :ensure t)
#+end_src

** Electric

Electric options, includes pair-mode (auto-insert matched braces, quotes, etc).

#+begin_src emacs-lisp
  (electric-pair-mode 1)
#+end_src

** Ring bell

Set the bell to visual mode-line only, with a more subtle foreground salman flash (instead of a background red flash).

#+begin_src emacs-lisp
(setq ring-bell-function
  (lambda()
  (let ((orig-fg (face-foreground 'mode-line)))
  (set-face-foreground 'mode-line "#F7B396")
  (run-with-idle-timer 0.1 nil
  (lambda (fg) (set-face-foreground 'mode-line fg))
  orig-fg)))
)
#+end_src
